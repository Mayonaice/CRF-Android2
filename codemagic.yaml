workflows:
  android-build:
    name: Android Debug Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      flutter: 3.13.9 # Menggunakan versi Flutter yang lebih baru dan stabil
      java: 17 # Menggunakan Java 17 untuk kompatibilitas dengan Gradle terbaru
    scripts:
      - name: Setup and build APK
        script: |
          # Tampilkan versi Flutter dan Java
          echo "Flutter version:"
          flutter --version
          echo "Java version:"
          java -version
          
          # PENTING: Tidak mengganti pubspec.yaml
          # Gunakan pubspec.yaml yang ada untuk mempertahankan semua dependensi
          
          # PENTING: Tidak mengganti main.dart
          # Gunakan main.dart yang ada untuk mempertahankan semua fitur aplikasi
          
          # Buat folder assets jika belum ada
          mkdir -p assets/images
          mkdir -p assets/fonts
          
          # Pastikan semua dependensi terinstall
          echo "Installing dependencies..."
          flutter pub get
          
          # Aktifkan multidex untuk menangani banyak metode
          echo "Configuring multidex..."
          if [ ! -f "android/app/src/main/java/com/advantage/crf_android/MultidexApplication.java" ]; then
            mkdir -p android/app/src/main/java/com/advantage/crf_android
            cat > android/app/src/main/java/com/advantage/crf_android/MultidexApplication.java << 'EOL'
          package com.advantage.crf_android;
          
          import androidx.multidex.MultiDexApplication;
          
          public class MultidexApplication extends MultiDexApplication {
          }
          EOL
          fi
          
          # Pastikan AndroidManifest.xml menggunakan MultidexApplication
          if grep -q "android:name=\"\${applicationName}\"" "android/app/src/main/AndroidManifest.xml"; then
            echo "Updating AndroidManifest.xml to use MultidexApplication..."
            sed -i '' 's/android:name="\${applicationName}"/android:name=".MultidexApplication"/g' android/app/src/main/AndroidManifest.xml
          fi
          
          # Pastikan build.gradle memiliki konfigurasi yang benar
          if [ -f "android/app/build.gradle" ]; then
            echo "Updating build.gradle for multidex..."
            if ! grep -q "multiDexEnabled true" "android/app/build.gradle"; then
              sed -i '' '/defaultConfig {/a\\        multiDexEnabled true' android/app/build.gradle
            fi
            
            if ! grep -q "implementation 'androidx.multidex:multidex:" "android/app/build.gradle"; then
              sed -i '' '/dependencies {/a\\    implementation "androidx.multidex:multidex:2.0.1"' android/app/build.gradle
            fi
          fi
          
          if [ -f "android/app/build.gradle.kts" ]; then
            echo "Updating build.gradle.kts for multidex..."
            if ! grep -q "multiDexEnabled = true" "android/app/build.gradle.kts"; then
              sed -i '' '/defaultConfig {/a\\        multiDexEnabled = true' android/app/build.gradle.kts
            fi
            
            if ! grep -q "implementation(\"androidx.multidex:multidex:" "android/app/build.gradle.kts"; then
              sed -i '' '/dependencies {/a\\    implementation("androidx.multidex:multidex:2.0.1")' android/app/build.gradle.kts
            fi
          fi
          
          # Tambahkan proguard rules untuk menghindari masalah obfuscation
          cat > android/app/proguard-rules.pro << 'EOL'
          # Flutter Wrapper
          -keep class io.flutter.app.** { *; }
          -keep class io.flutter.plugin.**  { *; }
          -keep class io.flutter.util.**  { *; }
          -keep class io.flutter.view.**  { *; }
          -keep class io.flutter.**  { *; }
          -keep class io.flutter.plugins.**  { *; }
          -keep class io.flutter.plugin.editing.** { *; }
          
          # QR Scanner packages
          -keep class net.sourceforge.zbar.** { *; }
          -keep class com.google.mlkit.** { *; }
          -keep class com.google.android.gms.** { *; }
          
          # Android ID
          -keep class androidx.core.** { *; }
          
          # Camera
          -keep class androidx.camera.** { *; }
          
          # Don't obfuscate model classes
          -keep class com.advantage.crf_android.models.** { *; }
          EOL
          
          # Build APK dengan verbose mode
          echo "Building APK with verbose mode..."
          flutter build apk --debug -v
          

          
          # Buat settings.gradle
          cat > android/settings.gradle << 'EOL'
          include ':app'
          
          def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
          def properties = new Properties()
          
          assert localPropertiesFile.exists()
          localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
          
          def flutterSdkPath = properties.getProperty("flutter.sdk")
          assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
          apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
          EOL
          
          # Buat gradle-wrapper.properties
          mkdir -p android/gradle/wrapper
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOL'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-7.0.2-all.zip
          EOL
          
          # Unduh gradle-wrapper.jar
          echo "Downloading gradle-wrapper.jar..."
          curl -L -o android/gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v7.0.2/gradle/wrapper/gradle-wrapper.jar
          
          # Buat local.properties
          cat > android/local.properties << 'EOL'
          flutter.sdk=/Users/builder/programs/flutter
          EOL
          
          # Buat gradlew executable
          cat > android/gradlew << 'EOL'
          #!/usr/bin/env bash
          
          ##############################################################################
          ##
          ##  Gradle start up script for UN*X
          ##
          ##############################################################################
          
          # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
          DEFAULT_JVM_OPTS=""
          
          APP_NAME="Gradle"
          APP_BASE_NAME=`basename "$0"`
          
          # Use the maximum available, or set MAX_FD != -1 to use that value.
          MAX_FD="maximum"
          
          warn ( ) {
              echo "$*"
          }
          
          die ( ) {
              echo
              echo "$*"
              echo
              exit 1
          }
          
          # OS specific support (must be 'true' or 'false').
          cygwin=false
          msys=false
          darwin=false
          case "`uname`" in
            CYGWIN* )
              cygwin=true
              ;;
            Darwin* )
              darwin=true
              ;;
            MINGW* )
              msys=true
              ;;
          esac
          
          # Attempt to set APP_HOME
          # Resolve links: $0 may be a link
          PRG="$0"
          # Need this for relative symlinks.
          while [ -h "$PRG" ] ; do
              ls=`ls -ld "$PRG"`
              link=`expr "$ls" : '.*-> \(.*\)$'`
              if expr "$link" : '/.*' > /dev/null; then
                  PRG="$link"
              else
                  PRG=`dirname "$PRG"`"/$link"
              fi
          done
          SAVED="`pwd`"
          cd "`dirname \"$PRG\"`/" >/dev/null
          APP_HOME="`pwd -P`"
          cd "$SAVED" >/dev/null
          
          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
          
          # Determine the Java command to use to start the JVM.
          if [ -n "$JAVA_HOME" ] ; then
              if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                  # IBM's JDK on AIX uses strange locations for the executables
                  JAVACMD="$JAVA_HOME/jre/sh/java"
              else
                  JAVACMD="$JAVA_HOME/bin/java"
              fi
              if [ ! -x "$JAVACMD" ] ; then
                  die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
          
          Please set the JAVA_HOME variable in your environment to match the
          location of your Java installation."
              fi
          else
              JAVACMD="java"
              which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
          
          Please set the JAVA_HOME variable in your environment to match the
          location of your Java installation."
          fi
          
          # Increase the maximum file descriptors if we can.
          if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
              MAX_FD_LIMIT=`ulimit -H -n`
              if [ $? -eq 0 ] ; then
                  if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
                      MAX_FD="$MAX_FD_LIMIT"
                  fi
                  ulimit -n $MAX_FD
                  if [ $? -ne 0 ] ; then
                      warn "Could not set maximum file descriptor limit: $MAX_FD"
                  fi
              else
                  warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
              fi
          fi
          
          # For Darwin, add options to specify how the application appears in the dock
          if $darwin; then
              GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
          fi
          
          # For Cygwin, switch paths to Windows format before running java
          if $cygwin ; then
              APP_HOME=`cygpath --path --mixed "$APP_HOME"`
              CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
              JAVACMD=`cygpath --unix "$JAVACMD"`
          
              # We build the pattern for arguments to be converted via cygpath
              ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
              SEP=""
              for dir in $ROOTDIRSRAW ; do
                  ROOTDIRS="$ROOTDIRS$SEP$dir"
                  SEP="|"
              done
              OURCYGPATTERN="(^($ROOTDIRS))"
              # Add a user-defined pattern to the cygpath arguments
              if [ "$GRADLE_CYGPATTERN" != "" ] ; then
                  OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
              fi
              # Now convert the arguments - kludge to limit ourselves to /bin/sh
              i=0
              for arg in "$@" ; do
                  CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
                  CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
          
                  if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
                      eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
                  else
                      eval `echo args$i`="\"$arg\""
                  fi
                  i=$((i+1))
              done
              case $i in
                  (0) set -- ;;
                  (1) set -- "$args0" ;;
                  (2) set -- "$args0" "$args1" ;;
                  (3) set -- "$args0" "$args1" "$args2" ;;
                  (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
                  (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
                  (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
                  (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
                  (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
                  (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
              esac
          fi
          
          # Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
          function splitJvmOpts() {
              JVM_OPTS=("$@")
          }
          eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
          JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
          
          exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
          EOL
          
          # Make gradlew executable
          chmod +x android/gradlew
          
          # Buat ic_launcher.png minimal
          mkdir -p android/app/src/main/res/mipmap-mdpi
          mkdir -p android/app/src/main/res/mipmap-hdpi
          mkdir -p android/app/src/main/res/mipmap-xhdpi
          mkdir -p android/app/src/main/res/mipmap-xxhdpi
          mkdir -p android/app/src/main/res/mipmap-xxxhdpi
          
          # Buat ikon sederhana (1x1 piksel putih)
          echo -n -e "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A\x00\x00\x00\x0D\x49\x48\x44\x52\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1F\x15\xC4\x89\x00\x00\x00\x0A\x49\x44\x41\x54\x78\x9C\x63\xF8\x0F\x00\x01\x01\x01\x00\x1B\x0C\x1B\x4C\x00\x00\x00\x00\x49\x45\x4E\x44\xAE\x42\x60\x82" > android/app/src/main/res/mipmap-mdpi/ic_launcher.png
          cp android/app/src/main/res/mipmap-mdpi/ic_launcher.png android/app/src/main/res/mipmap-hdpi/ic_launcher.png
          cp android/app/src/main/res/mipmap-mdpi/ic_launcher.png android/app/src/main/res/mipmap-xhdpi/ic_launcher.png
          cp android/app/src/main/res/mipmap-mdpi/ic_launcher.png android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png
          cp android/app/src/main/res/mipmap-mdpi/ic_launcher.png android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
          
          # Get dependencies
          flutter pub get
          
          # Build APK dengan verbose mode
          echo "Building APK with verbose mode..."
          flutter build apk --debug -v
          
          # Cek hasil build
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "✅ APK build berhasil!"
            ls -lh build/app/outputs/flutter-apk/app-debug.apk
          else
            echo "❌ APK build gagal!"
            echo "Mencoba build lagi dengan Gradle langsung..."
            cd android && ./gradlew assembleDebug
            
            if [ -f "../build/app/outputs/flutter-apk/app-debug.apk" ]; then
              echo "✅ APK build berhasil pada percobaan kedua!"
              ls -lh ../build/app/outputs/flutter-apk/app-debug.apk
            elif [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
              echo "✅ APK build berhasil dengan Gradle langsung!"
              mkdir -p ../build/app/outputs/flutter-apk/
              cp app/build/outputs/apk/debug/app-debug.apk ../build/app/outputs/flutter-apk/
              ls -lh ../build/app/outputs/flutter-apk/app-debug.apk
            else
              echo "❌ APK build masih gagal!"
              exit 1
            fi
          fi
    artifacts:
      - build/app/outputs/flutter-apk/app-debug.apk 