workflows:
  android-build:
    name: Android Debug Build
    max_build_duration: 90
    instance_type: mac_mini_m2
    environment:
      flutter: 3.13.9 # Menggunakan versi Flutter yang lebih baru dan stabil
      java: 11 # Menggunakan Java 11 untuk kompatibilitas dengan Gradle 7.0.2
    scripts:
      - name: Setup and build APK
        script: |
          # Tampilkan versi Flutter dan Java
          echo "Flutter version:"
          flutter --version
          echo "Java version:"
          java -version
          
          # PENTING: Tidak mengganti pubspec.yaml dan main.dart
          # Gunakan pubspec.yaml dan main.dart yang ada untuk mempertahankan semua fitur aplikasi
          
          # Buat folder assets jika belum ada
          mkdir -p assets/images
          mkdir -p assets/fonts
          
          # Pastikan semua dependensi terinstall
          echo "Installing dependencies..."
          flutter pub get
          
          # Aktifkan multidex untuk menangani banyak metode
          echo "Configuring multidex..."
          mkdir -p android/app/src/main/java/com/advantage/crf_android
          cat > android/app/src/main/java/com/advantage/crf_android/MultidexApplication.java << 'EOL'
          package com.advantage.crf_android;
          
          import androidx.multidex.MultiDexApplication;
          
          public class MultidexApplication extends MultiDexApplication {
          }
          EOL
          
          # Pastikan AndroidManifest.xml menggunakan MultidexApplication dan memiliki package name
          if grep -q "android:name=\"\${applicationName}\"" "android/app/src/main/AndroidManifest.xml"; then
            echo "Updating AndroidManifest.xml to use MultidexApplication..."
            sed -i '' 's/android:name="\${applicationName}"/android:name=".MultidexApplication"/g' android/app/src/main/AndroidManifest.xml
          fi
          
          # Tambahkan package name ke AndroidManifest.xml jika tidak ada
          if ! grep -q "package=" "android/app/src/main/AndroidManifest.xml"; then
            echo "Adding package name to AndroidManifest.xml..."
            sed -i '' 's/<manifest xmlns:android="http:\/\/schemas.android.com\/apk\/res\/android"/<manifest xmlns:android="http:\/\/schemas.android.com\/apk\/res\/android" package="com.advantage.crf_android"/g' android/app/src/main/AndroidManifest.xml
          fi
          
          # Hapus build.gradle.kts dan settings.gradle.kts jika ada
          rm -f android/build.gradle.kts
          rm -f android/settings.gradle.kts
          rm -f android/app/build.gradle.kts
          
          # Buat build.gradle root yang kompatibel dengan Java 11
          cat > android/build.gradle << 'EOL'
          buildscript {
              ext.kotlin_version = '1.7.10'
              repositories {
                  google()
                  mavenCentral()
              }
          
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.3.0'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          rootProject.buildDir = '../build'
          subprojects {
              project.buildDir = "${rootProject.buildDir}/${project.name}"
          }
          subprojects {
              project.evaluationDependsOn(':app')
          }
          
          tasks.register("clean", Delete) {
              delete rootProject.buildDir
          }
          EOL
          
          # Buat build.gradle app yang kompatibel dengan Java 11
          cat > android/app/build.gradle << 'EOL'
          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }
          
          def flutterRoot = localProperties.getProperty('flutter.sdk')
          if (flutterRoot == null) {
              throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
          }
          
          def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
          if (flutterVersionCode == null) {
              flutterVersionCode = '1'
          }
          
          def flutterVersionName = localProperties.getProperty('flutter.versionName')
          if (flutterVersionName == null) {
              flutterVersionName = '1.0'
          }
          
          apply plugin: 'com.android.application'
          apply plugin: 'kotlin-android'
          apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
          
          android {
              compileSdkVersion 34
              namespace "com.advantage.crf_android"
          
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          
              kotlinOptions {
                  jvmTarget = '1.8'
              }
          
              sourceSets {
                  main.java.srcDirs += 'src/main/kotlin'
              }
          
              defaultConfig {
                  applicationId "com.advantage.crf_android"
                  minSdkVersion 21
                  targetSdkVersion 34
                  versionCode flutterVersionCode.toInteger()
                  versionName flutterVersionName
                  multiDexEnabled true
              }
          
              buildTypes {
                  release {
                      signingConfig signingConfigs.debug
                      minifyEnabled false
                      shrinkResources false
                  }
                  debug {
                      minifyEnabled false
                      shrinkResources false
                  }
              }
          }
          
          flutter {
              source '../..'
          }
          
          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10"
              implementation "androidx.multidex:multidex:2.0.1"
              
              // Camera dependencies with fixed versions
              implementation "androidx.camera:camera-core:1.2.3"
              implementation "androidx.camera:camera-camera2:1.2.3"
              implementation "androidx.camera:camera-lifecycle:1.2.3"
              implementation "androidx.camera:camera-view:1.2.3"
              implementation "androidx.camera:camera-video:1.2.3"
              
              // ML Kit dependencies with fixed versions
              implementation "com.google.mlkit:face-detection:16.1.5"
              implementation "com.google.android.gms:play-services-mlkit-face-detection:17.1.0"
              
              // Force specific versions for compatibility
              implementation "androidx.work:work-runtime:2.7.1"
              implementation "androidx.work:work-multiprocess:2.7.1"
          }
          EOL
          
          # Buat settings.gradle yang kompatibel dengan Java 11
          cat > android/settings.gradle << 'EOL'
          include ':app'
          
          def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
          def properties = new Properties()
          
          assert localPropertiesFile.exists()
          localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
          
          def flutterSdkPath = properties.getProperty("flutter.sdk")
          assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
          apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
          EOL
          
          # Buat gradle-wrapper.properties yang kompatibel dengan Java 11
          mkdir -p android/gradle/wrapper
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOL'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-7.5-all.zip
          EOL
          
          # Unduh gradle-wrapper.jar
          echo "Downloading gradle-wrapper.jar..."
          curl -L -o android/gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v7.5.0/gradle/wrapper/gradle-wrapper.jar
          
          # Buat local.properties
          cat > android/local.properties << 'EOL'
          flutter.sdk=/Users/builder/programs/flutter
          EOL
          
          # Buat gradlew executable
          cat > android/gradlew << 'EOL'
          #!/usr/bin/env bash
          
          ##############################################################################
          ##
          ##  Gradle start up script for UN*X
          ##
          ##############################################################################
          
          # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
          DEFAULT_JVM_OPTS=""
          
          APP_NAME="Gradle"
          APP_BASE_NAME=`basename "$0"`
          
          # Use the maximum available, or set MAX_FD != -1 to use that value.
          MAX_FD="maximum"
          
          warn ( ) {
              echo "$*"
          }
          
          die ( ) {
              echo
              echo "$*"
              echo
              exit 1
          }
          
          # OS specific support (must be 'true' or 'false').
          cygwin=false
          msys=false
          darwin=false
          case "`uname`" in
            CYGWIN* )
              cygwin=true
              ;;
            Darwin* )
              darwin=true
              ;;
            MINGW* )
              msys=true
              ;;
          esac
          
          # Attempt to set APP_HOME
          # Resolve links: $0 may be a link
          PRG="$0"
          # Need this for relative symlinks.
          while [ -h "$PRG" ] ; do
              ls=`ls -ld "$PRG"`
              link=`expr "$ls" : '.*-> \(.*\)$'`
              if expr "$link" : '/.*' > /dev/null; then
                  PRG="$link"
              else
                  PRG=`dirname "$PRG"`"/$link"
              fi
          done
          SAVED="`pwd`"
          cd "`dirname \"$PRG\"`/" >&-
          APP_HOME="`pwd -P`"
          cd "$SAVED" >&-
          
          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
          
          # Determine the Java command to use to start the JVM.
          if [ -n "$JAVA_HOME" ] ; then
              if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                  # IBM's JDK on AIX uses strange locations for the executables
                  JAVACMD="$JAVA_HOME/jre/sh/java"
              else
                  JAVACMD="$JAVA_HOME/bin/java"
              fi
              if [ ! -x "$JAVACMD" ] ; then
                  die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
          
          Please set the JAVA_HOME variable in your environment to match the
          location of your Java installation."
              fi
          else
              JAVACMD="java"
              which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
          
          Please set the JAVA_HOME variable in your environment to match the
          location of your Java installation."
          fi
          
          # Increase the maximum file descriptors if we can.
          if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
              MAX_FD_LIMIT=`ulimit -H -n`
              if [ $? -eq 0 ] ; then
                  if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
                      MAX_FD="$MAX_FD_LIMIT"
                  fi
                  ulimit -n $MAX_FD
                  if [ $? -ne 0 ] ; then
                      warn "Could not set maximum file descriptor limit: $MAX_FD"
                  fi
              else
                  warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
              fi
          fi
          
          # For Darwin, add options to specify how the application appears in the dock
          if $darwin; then
              GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
          fi
          
          # For Cygwin, switch paths to Windows format before running java
          if $cygwin ; then
              APP_HOME=`cygpath --path --mixed "$APP_HOME"`
              CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
              JAVACMD=`cygpath --unix "$JAVACMD"`
          
              # We build the pattern for arguments to be converted via cygpath
              ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
              SEP=""
              for dir in $ROOTDIRSRAW ; do
                  ROOTDIRS="$ROOTDIRS$SEP$dir"
                  SEP="|"
              done
              OURCYGPATTERN="(^($ROOTDIRS))"
              # Add a user-defined pattern to the cygpath arguments
              if [ "$GRADLE_CYGPATTERN" != "" ] ; then
                  OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
              fi
              # Now convert the arguments - kludge to limit ourselves to /bin/sh
              i=0
              for arg in "$@" ; do
                  CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
                  CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
          
                  if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
                      eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
                  else
                      eval `echo args$i`="\"$arg\""
                  fi
                  i=$((i+1))
              done
              case $i in
                  (0) set -- ;;
                  (1) set -- "$args0" ;;
                  (2) set -- "$args0" "$args1" ;;
                  (3) set -- "$args0" "$args1" "$args2" ;;
                  (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
                  (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
                  (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
                  (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
                  (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
                  (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
              esac
          fi
          
          # Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
          function splitJvmOpts() {
              JVM_OPTS=("$@")
          }
          eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
          JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
          
          exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
          EOL
          
          # Make gradlew executable
          chmod +x android/gradlew
          
          # Tambahkan proguard rules untuk menghindari masalah obfuscation
          cat > android/app/proguard-rules.pro << 'EOL'
          # Flutter Wrapper
          -keep class io.flutter.app.** { *; }
          -keep class io.flutter.plugin.**  { *; }
          -keep class io.flutter.util.**  { *; }
          -keep class io.flutter.view.**  { *; }
          -keep class io.flutter.**  { *; }
          -keep class io.flutter.plugins.**  { *; }
          -keep class io.flutter.plugin.editing.** { *; }
          
          # QR Scanner packages
          -keep class net.sourceforge.zbar.** { *; }
          -keep class com.google.mlkit.** { *; }
          -keep class com.google.android.gms.** { *; }
          
          # Android ID
          -keep class androidx.core.** { *; }
          
          # Camera
          -keep class androidx.camera.** { *; }
          
          # Don't obfuscate model classes
          -keep class com.advantage.crf_android.models.** { *; }
          EOL
          
          # Tambahkan logging untuk membantu debug
          echo "Current directory: $(pwd)"
          echo "Listing android directory:"
          ls -la android
          echo "Listing android/app directory:"
          ls -la android/app
          echo "Checking Gradle version:"
          cd android && ./gradlew --version && cd ..
          
          # Tambahkan opsi Gradle untuk mempercepat build dan mengatasi masalah transformasi AAR
          cat > android/gradle.properties << 'EOL'
          org.gradle.jvmargs=-Xmx6g -XX:MaxPermSize=3g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
          org.gradle.daemon=true
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          org.gradle.caching=true
          android.enableR8=true
          android.enableJetifier=true
          android.useAndroidX=true
          android.nonTransitiveRClass=true
          android.enableDexingArtifactTransform=false
          android.enableResourceOptimizations=false
          android.disableAutomaticComponentCreation=true
          android.experimental.enableArtProfiles=false
          EOL
          
          # Bersihkan cache Gradle untuk mengatasi masalah transformasi
          echo "Cleaning Gradle cache..."
          rm -rf ~/.gradle/caches/transforms-3
          mkdir -p ~/.gradle/caches/transforms-3
          
          # Tambahkan konfigurasi transformasi AAR
          mkdir -p android/app/build-cache
          cat > android/app/build-cache/aar-transform-config.json << 'EOL'
          {
            "version": 1,
            "transformations": [
              {
                "name": "androidx.camera:camera-core:1.2.3",
                "cacheable": true
              },
              {
                "name": "androidx.camera:camera-camera2:1.2.3",
                "cacheable": true
              },
              {
                "name": "androidx.camera:camera-lifecycle:1.2.3",
                "cacheable": true
              },
              {
                "name": "androidx.camera:camera-view:1.2.3",
                "cacheable": true
              },
              {
                "name": "androidx.camera:camera-video:1.2.3",
                "cacheable": true
              }
            ]
          }
          EOL
          
          # Tambahkan logging lebih detail untuk membantu diagnosa
          echo "=== FLUTTER DOCTOR VERBOSE ==="
          flutter doctor -v
          echo "=== FLUTTER CONFIG ==="
          flutter config
          echo "=== FLUTTER DEVICES ==="
          flutter devices
          
          # Build APK dengan pendekatan yang lebih sederhana dan logging detail
          echo "=== BUILDING APK (BASIC APPROACH) ==="
          flutter build apk --debug --verbose
          
          # Cek hasil build dan gunakan pendekatan alternatif jika gagal
          BUILD_RESULT=$?
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "⚠️ Flutter build failed with code $BUILD_RESULT. Trying alternative approach..."
            
            echo "=== FLUTTER CLEAN ==="
            flutter clean
            
            echo "=== FLUTTER PUB GET (RETRY) ==="
            flutter pub get
            
            echo "=== BUILDING APK (ALTERNATIVE APPROACH) ==="
            flutter build apk --debug --split-debug-info=build/debug-info
            
            if [ $? -ne 0 ]; then
              echo "⚠️ Flutter build still failed. Trying direct Gradle build..."
              cd android && ./gradlew --info assembleDebug
            
            if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
              echo "✅ APK build berhasil dengan Gradle langsung!"
              mkdir -p ../build/app/outputs/flutter-apk/
              cp app/build/outputs/apk/debug/app-debug.apk ../build/app/outputs/flutter-apk/
              ls -lh ../build/app/outputs/flutter-apk/app-debug.apk
            else
              echo "❌ APK build masih gagal setelah timeout!"
              echo "Diagnostic information:"
              echo "Free disk space:"
              df -h
              echo "Memory usage:"
              vm_stat
              echo "Process memory info:"
              ps -m
              echo "Top processes:"
              ps -eo pid,ppid,user,%cpu,%mem,vsz,rss,stat,start,time,command | head -10
              exit 1
            fi
          elif [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "✅ APK build berhasil!"
            ls -lh build/app/outputs/flutter-apk/app-debug.apk
          else
            echo "❌ APK build gagal!"
            echo "Mencoba build lagi dengan Gradle langsung..."
            cd android && ./gradlew --stop && ./gradlew clean && ./gradlew assembleDebug --info
            
            if [ -f "../build/app/outputs/flutter-apk/app-debug.apk" ]; then
              echo "✅ APK build berhasil pada percobaan kedua!"
              ls -lh ../build/app/outputs/flutter-apk/app-debug.apk
            elif [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
              echo "✅ APK build berhasil dengan Gradle langsung!"
              mkdir -p ../build/app/outputs/flutter-apk/
              cp app/build/outputs/apk/debug/app-debug.apk ../build/app/outputs/flutter-apk/
              ls -lh ../build/app/outputs/flutter-apk/app-debug.apk
            else
              echo "❌ APK build masih gagal!"
              echo "Diagnostic information:"
              echo "Free disk space:"
              df -h
              echo "Memory usage:"
              vm_stat
              echo "Process memory info:"
              ps -m
              echo "Top processes:"
              ps -eo pid,ppid,user,%cpu,%mem,vsz,rss,stat,start,time,command | head -10
              exit 1
            fi
          fi
    artifacts:
      - build/app/outputs/flutter-apk/app-debug.apk 